{
    "users": [
        {
            "id": 1,
            "username": "john_doe",
            "email": "john.doe@example.com",
            "passwordHash": "hashed_password_1",
            "profilePicture": "https://example.com/profiles/john.jpg",
            "joinDate": "2024-11-25"
        },
        {
            "id": 2,
            "username": "jane_smith",
            "email": "jane.smith@example.com",
            "passwordHash": "hashed_password_2",
            "profilePicture": "https://example.com/profiles/jane.jpg",
            "joinDate": "2024-10-15"
        },
        {
            "id": 3,
            "username": "mark_trader",
            "email": "mark.trader@example.com",
            "passwordHash": "hashed_password_3",
            "profilePicture": "https://example.com/profiles/mark.jpg",
            "joinDate": "2024-09-10"
        },
        {
            "id": 4,
            "username": "susan_buyer",
            "email": "susan.buyer@example.com",
            "passwordHash": "hashed_password_4",
            "profilePicture": "https://example.com/profiles/susan.jpg",
            "joinDate": "2024-08-20"
        },
        {
            "id": 5,
            "username": "alice_wonder",
            "email": "alice.wonder@example.com",
            "passwordHash": "hashed_password_5",
            "profilePicture": "https://example.com/profiles/alice.jpg",
            "joinDate": "2024-07-15"
        },
        {
            "id": 6,
            "username": "bob_builder",
            "email": "bob.builder@example.com",
            "passwordHash": "hashed_password_6",
            "profilePicture": "https://example.com/profiles/bob.jpg",
            "joinDate": "2024-06-10"
        },
        {
            "id": 7,
            "username": "charlie_brown",
            "email": "charlie.brown@example.com",
            "passwordHash": "hashed_password_7",
            "profilePicture": "https://example.com/profiles/charlie.jpg",
            "joinDate": "2024-05-05"
        },
        {
            "id": 8,
            "username": "david_smith",
            "email": "david.smith@example.com",
            "passwordHash": "hashed_password_8",
            "profilePicture": "https://example.com/profiles/david.jpg",
            "joinDate": "2024-04-01"
        },
        {
            "id": 9,
            "username": "eva_green",
            "email": "eva.green@example.com",
            "passwordHash": "hashed_password_9",
            "profilePicture": "https://example.com/profiles/eva.jpg",
            "joinDate": "2024-03-20"
        }
    ],
    "categories": [
        { "id": 1, "name": "Backend Development" },
        { "id": 2, "name": "Frontend Development" },
        { "id": 3, "name": "Database Design" }
    ],
    "questions": [
        {
            "id": 101,
            "title": "How to implement authentication in Node.js?",
            "content": "I am trying to implement user authentication in my Node.js application. Can someone guide me with a secure and scalable approach?",
            "userId": 1,
            "tags": [1, 2],
            "categoryId": 1,
            "createdDate": "2024-11-27"
        },
        {
            "id": 102,
            "title": "What are closures in JavaScript?",
            "content": "Can someone explain closures in JavaScript with an example? I find the concept a bit confusing.",
            "userId": 2,
            "tags": [2, 3],
            "categoryId": 2,
            "createdDate": "2024-11-25"
        },
        {
            "id": 103,
            "title": "Receiving Bad Request Error From Starbucks Website?",
            "content": "Can someone explain closures in JavaScript with an example? I find the concept a bit confusing.",
            "userId": 2,
            "tags": [2, 3],
            "categoryId": 2,
            "createdDate": "2024-11-25"
        },
        {
            "id": 104,
            "title": "What are closures in JavaScript?",
            "content": "Can someone explain closures in JavaScript with an example? I find the concept a bit confusing.",
            "userId": 2,
            "tags": [2, 3],
            "categoryId": 2,
            "createdDate": "2024-11-25"
        },
        {
            "id": 105,
            "title": "What are closures in JavaScript?",
            "content": "Can someone explain closures in JavaScript with an example? I find the concept a bit confusing.",
            "userId": 2,
            "tags": [2, 3],
            "categoryId": 2,
            "createdDate": "2024-11-25"
        },
        {
            "id": 106,
            "title": "What are closures in JavaScript?",
            "content": "Can someone explain closures in JavaScript with an example? I find the concept a bit confusing.",
            "userId": 2,
            "tags": [2, 3],
            "categoryId": 2,
            "createdDate": "2024-11-25"
        },
        {
            "id": 107,
            "title": "What are closures in JavaScript?",
            "content": "Can someone explain closures in JavaScript with an example? I find the concept a bit confusing.",
            "userId": 2,
            "tags": [2, 3],
            "categoryId": 2,
            "createdDate": "2024-11-25"
        },
        {
            "id": 108,
            "title": "What are closures in JavaScript?",
            "content": "Can someone explain closures in JavaScript with an example? I find the concept a bit confusing.",
            "userId": 2,
            "tags": [2, 3],
            "categoryId": 2,
            "createdDate": "2024-11-25"
        },
        {
            "id": 109,
            "title": "What are closures in JavaScript?",
            "content": "Can someone explain closures in JavaScript with an example? I find the concept a bit confusing.",
            "userId": 2,
            "tags": [2, 3],
            "categoryId": 2,
            "createdDate": "2024-11-25"
        },
        {
            "id": 110,
            "title": "What are closures in JavaScript?",
            "content": "Can someone explain closures in JavaScript with an example? I find the concept a bit confusing.",
            "userId": 2,
            "tags": [2, 3],
            "categoryId": 2,
            "createdDate": "2024-11-25"
        }
    ],

    "answers": [
        {
            "id": 201,
            "questionId": 101,
            "content": "You can use libraries like Passport.js for implementing authentication in Node.js. It supports multiple strategies such as local, OAuth, etc.",
            "userId": 2,
            "createdDate": "2024-11-28",
            "votes": 8
        },
        {
            "id": 202,
            "questionId": 102,
            "content": "A closure is a function that retains access to its parent scope, even after the parent function has closed. Here's an example:\n```javascript\nfunction outer() {\n    let count = 0;\n    return function inner() {\n        count++;\n        return count;\n    };\n}\nconst counter = outer();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n```\n",
            "userId": 1,
            "createdDate": "2024-11-26",
            "votes": 15
        },
        {
            "id": 203,
            "questionId": 103,
            "content": "If the request is correct, the API running on that server should send back a JSON string with store info. This obviously works fine from the Starbucks website, when the browser is sending the request, but my goal is to send the request programmatically, and when I do so I am getting a Bad Request error.I am using curl to try and figure out what works, but no luck so far. This is my curl command...",
            "userId": 1,
            "createdDate": "2024-11-26",
            "votes": 15
        },
        {
            "id": 204,
            "questionId": 104,
            "content": "A closure is a function that retains access to its parent scope, even after the parent function has closed. Here's an example:\n```javascript\nfunction outer() {\n    let count = 0;\n    return function inner() {\n        count++;\n        return count;\n    };\n}\nconst counter = outer();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n```\n",
            "userId": 1,
            "createdDate": "2024-11-26",
            "votes": 15
        },
        {
            "id": 205,
            "questionId": 105,
            "content": "A closure is a function that retains access to its parent scope, even after the parent function has closed. Here's an example:\n```javascript\nfunction outer() {\n    let count = 0;\n    return function inner() {\n        count++;\n        return count;\n    };\n}\nconst counter = outer();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n```\n",
            "userId": 1,
            "createdDate": "2024-11-26",
            "votes": 15
        },
        {
            "id": 206,
            "questionId": 106,
            "content": "A closure is a function that retains access to its parent scope, even after the parent function has closed. Here's an example:\n```javascript\nfunction outer() {\n    let count = 0;\n    return function inner() {\n        count++;\n        return count;\n    };\n}\nconst counter = outer();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n```\n",
            "userId": 1,
            "createdDate": "2024-11-26",
            "votes": 15
        },
        {
            "id": 207,
            "questionId": 107,
            "content": "A closure is a function that retains access to its parent scope, even after the parent function has closed. Here's an example:\n```javascript\nfunction outer() {\n    let count = 0;\n    return function inner() {\n        count++;\n        return count;\n    };\n}\nconst counter = outer();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n```\n",
            "userId": 1,
            "createdDate": "2024-11-26",
            "votes": 15
        },
        {
            "id": 208,
            "questionId": 108,
            "content": "A closure is a function that retains access to its parent scope, even after the parent function has closed. Here's an example:\n```javascript\nfunction outer() {\n    let count = 0;\n    return function inner() {\n        count++;\n        return count;\n    };\n}\nconst counter = outer();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n```\n",
            "userId": 1,
            "createdDate": "2024-11-26",
            "votes": 15
        },
        {
            "id": 209,
            "questionId": 109,
            "content": "A closure is a function that retains access to its parent scope, even after the parent function has closed. Here's an example:\n```javascript\nfunction outer() {\n    let count = 0;\n    return function inner() {\n        count++;\n        return count;\n    };\n}\nconst counter = outer();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n```\n",
            "userId": 1,
            "createdDate": "2024-11-26",
            "votes": 15
        },
        {
            "id": 210,
            "questionId": 110,
            "content": "A closure is a function that retains access to its parent scope, even after the parent function has closed. Here's an example:\n```javascript\nfunction outer() {\n    let count = 0;\n    return function inner() {\n        count++;\n        return count;\n    };\n}\nconst counter = outer();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n```\n",
            "userId": 1,
            "createdDate": "2024-11-26",
            "votes": 15
        }
    ],
}
